{"ast":null,"code":"var _jsxFileName = \"D:\\\\WorkingFolder\\\\LIMS\\\\ALPD\\\\branches\\\\Version 11.0.0.1\\\\QuaLISWeb\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\n\n/* eslint-disable no-undef */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButtom from '../custom-button/custom-button.component';\nimport { changeLanguage, getLoginDetails, getUserSiteAndRole, updateStore, createPassword, validateADSPassword, changepassword, getUsersiteRole, checkPassword } from '../../actions';\nimport CreatePassword from '../../pages/Login/CreatePassWord';\nimport CreateADSPassword from '../../pages/Login/CreateADSPassWord';\nimport { clickOnLoginButton } from '../../actions';\nimport { toast } from 'react-toastify';\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\nimport { validateLoginId } from '../CommonScript';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport ChangePassword from '../../pages/Login/ChangePassWord';\nimport { changePasswordValidation, fnPassMessage, fnValidatePassword } from '../../pages/Login/LoginCommonFunction';\nimport { LOGINTYPE, transactionStatus } from '../Enumeration';\nimport { Form } from 'react-bootstrap';\nimport { loadCaptchaEnginge, LoadCanvasTemplate, validateCaptcha } from 'react-simple-captcha';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openCPModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeADSModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openADSModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onCreatePassWord = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const createPwdRecord = this.state.createPwdRecord;\n      const snewpassword = createPwdRecord.snewpassword.trim();\n      const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\n\n      if (selectedRecord.sloginid === snewpassword) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\"\n        }));\n      } else if (sconfirmpassword !== snewpassword) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PASSWORDNOTMATCHED\"\n        }));\n      } else {\n        // Added by Ragul.C for Double alert shows for Invaliduser\n        //selectedRecord[\"nusermultirolecode\"]=this.props.Login.nusermultirolecode;\n        selectedRecord[\"nusermultirolecode\"] = this.state.selectedRecord.nusermultirolecode !== undefined && this.state.selectedRecord.nusermultirolecode !== \"\" ? this.state.selectedRecord.nusermultirolecode : this.props.Login.nusermultirolecode;\n        selectedRecord[\"nusersitecode\"] = this.state.selectedRecord.nusersitecode !== undefined && this.state.selectedRecord.nusersitecode !== \"\" ? this.state.selectedRecord.nusersitecode : this.props.Login.nusersitecode; // selectedRecord[\"nusersitecode\"]=this.props.Login.nusersitecode;\n\n        selectedRecord[\"nusercode\"] = this.props.Login.nusercode;\n        selectedRecord[\"nlogintypecode\"] = this.props.Login.nlogintypecode;\n        selectedRecord[\"nlanguagecode\"] = this.props.Login.nlanguagecode;\n        this.setState({\n          selectedRecord\n        }); // \n\n        const returnString = fnValidatePassword(this.props.Login.passwordPolicy, snewpassword);\n\n        if (returnString === 0) {\n          const inputParam = {\n            spassword: snewpassword,\n            nusersitecode: selectedRecord.nusersitecode.value,\n            nusermultirolecode: selectedRecord.nusermultirolecode.value\n          };\n          this.props.createPassword(inputParam);\n        } else {\n          toast.info(returnString);\n        }\n      }\n    };\n\n    this.onCreateADSPassWord = () => {\n      const selectedRecord = { ...this.state.selectedRecord\n      };\n      const createPwdRecord = this.state.createPwdRecord;\n      const sadspassword = createPwdRecord.sadspassword && createPwdRecord.sadspassword.trim();\n      const inputParam = {\n        spassword: sadspassword,\n        sloginid: selectedRecord.sloginid,\n        slanguagefilename: this.props.Login.nlanguagecode && this.props.Login.nlanguagecode.item && this.props.Login.nlanguagecode.item.sfilename,\n        selectedRecord: selectedRecord,\n        nlogintypecode: this.props.Login.userInfo && this.props.Login.userInfo.nlogintypecode || LOGINTYPE.ADS\n      };\n      this.props.validateADSPassword(inputParam);\n    };\n\n    this.onChangePassword = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const createPwdRecord = this.state.createPwdRecord;\n      const returnMsg = changePasswordValidation(createPwdRecord, this.props.Login.passwordPolicy, this.state.selectedRecord.sloginid);\n\n      if (returnMsg === 0) {\n        const inputParam = {\n          spassword: createPwdRecord.snewpassword.trim(),\n          sOldPassword: createPwdRecord.soldpassword.trim(),\n          nusersitecode: selectedRecord.nusersitecode.value,\n          isPasswordExpiry: true,\n          userInfo: { ...this.props.Login.userInfo,\n            slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\n            sloginid: selectedRecord.sloginid,\n            suserrolename: selectedRecord.nusermultirolecode.label\n          },\n          slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode\n        };\n        this.props.changepassword(inputParam);\n      } else {\n        toast.info(returnMsg);\n      }\n    };\n\n    this.onSelectChange = (ComboVal, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = ComboVal;\n\n      if (fieldName === \"nlogintypecode\" && ComboVal.value === LOGINTYPE.INTERNAL && selectedRecord.sloginid && selectedRecord.sloginid !== \"\" && selectedRecord.nusermultirolecode && selectedRecord.nusermultirolecode !== \"\" && selectedRecord.nusersitecode && selectedRecord.nusersitecode !== \"\") {\n        const inputParam = {\n          sloginid: this.state.selectedRecord.sloginid,\n          Language: selectedRecord.nlanguagecode.item,\n          nusermultisitecode: selectedRecord.nusersitecode.value,\n          nusermultirolecode: selectedRecord.nusermultirolecode.value,\n          nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\n          nlogintypecode: ComboVal.value\n        };\n        this.props.checkPassword(inputParam, selectedRecord);\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onChangeLanguage = (ComboVal, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = ComboVal;\n      this.props.changeLanguage(ComboVal.item.slanguagetypecode, selectedRecord, this.props.Login.loginTypes);\n    };\n\n    this.onLoginEvent = event => {\n      if (event.keyCode === 13) {\n        const inputValue = event.target.value;\n        this.setState({\n          show: this.props.Login.open\n        });\n\n        if (inputValue !== \"\") {\n          this.onLoginSubmit(inputValue);\n        }\n      }\n    };\n\n    this.AutoLogin = event => {\n      if (event.keyCode === 118) {\n        let nlogintypecode = 1;\n        const inputParam = {\n          nusermultisitecode: parseInt(-1),\n          nusermultirolecode: parseInt(-1),\n          slanguagetypecode: \"en-US\",\n          spassword: \"123\",\n          nusercode: -1,\n          nlogintypecode: 1,\n          nuserrolecode: -1,\n          url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adslogin\",\n          navigation: \"home\",\n          nsitecode: -1,\n          languageList: this.props.Login.languageList\n        };\n        this.setState({\n          nusermultisitecode: parseInt(-1),\n          nusermultirolecode: parseInt(-1),\n          slanguagetypecode: 1,\n          spassword: \"123\",\n          nusercode: -1,\n          nlogintypecode: 1,\n          nuserrolecode: -1\n        });\n        this.props.clickOnLoginButton(inputParam, this.props.Login.languageList);\n      }\n    };\n\n    this.state = {\n      PasswordPolicy: {},\n      selectedRecord: {},\n      captchaKey: false //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)\n\n    };\n    this.loginRef = React.createRef();\n  }\n\n  render() {\n    const {\n      loginTypeList,\n      languageList,\n      loginUserSite,\n      count = 0,\n      loginUserRole\n    } = this.props.Login;\n    return /*#__PURE__*/React.createElement(Form, {\n      ref: this.loginRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sloginid\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_LOGINID\"\n      }),\n      type: \"text\" // placeholder={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\n      ,\n      required: true,\n      isMandatory: \"*\",\n      onChange: event => this.onLoginInputChange(event),\n      onBlur: event => this.onFocusOutEvent(event) //ALPD-1926\n      // onKeyUp={this.AutoLogin} \n      ,\n      value: this.state.selectedRecord.sloginid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"spassword\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_PASSWORD\"\n      }),\n      type: \"password\",\n      required: true,\n      isMandatory: \"*\" // placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\n      ,\n      onChange: event => this.selectInputOnChange(event),\n      onKeyUp: this.onLoginEvent,\n      value: this.state.selectedRecord.spassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }), loginUserSite !== undefined && loginUserSite.length > 1 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nusersitecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SITE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: loginUserSite || [],\n      optionId: \"nusersitecode\",\n      optionValue: \"ssitename\",\n      value: this.state.selectedRecord.nusersitecode ? this.state.selectedRecord.nusersitecode : \"\",\n      onChange: value => this.onUsersiteChange(value, \"nusersitecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nusermultirolecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_USERROLE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: loginUserRole || [],\n      optionId: \"nusermultirolecode\",\n      optionValue: \"suserrolename\",\n      value: this.state.selectedRecord.nusermultirolecode ? this.state.selectedRecord.nusermultirolecode : \"\",\n      onChange: value => this.onSelectChange(value, \"nusermultirolecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), loginTypeList !== undefined && loginTypeList.length > 1 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nlogintypecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_LOGINTYPE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: loginTypeList || [],\n      optionId: \"nlogintypecode\",\n      optionValue: \"sdisplayname\",\n      value: this.state.selectedRecord.nlogintypecode ? this.state.selectedRecord.nlogintypecode : \"\",\n      onChange: value => this.onSelectChange(value, \"nlogintypecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 18\n      }\n    }) : \"\", languageList !== undefined && languageList.length > 1 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nlanguagecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_LANGUAGE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: languageList || [],\n      optionId: \"nlanguagecode\",\n      optionValue: \"slanguagename\",\n      value: this.state.selectedRecord.nlanguagecode ? this.state.selectedRecord.nlanguagecode : \"\",\n      onChange: value => this.onChangeLanguage(value, \"nlanguagecode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }) : \"\", parseInt(this.props.Login.captchaNeeded) === transactionStatus.YES ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(LoadCanvasTemplate, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '15px',\n        right: '25px',\n        width: '100%',\n        height: '2px',\n        backgroundColor: 'black',\n        transform: 'translateY(-50%)',\n        pointerEvents: 'none',\n        maxWidth: \"150px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"scaptcha\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_CAPTCHA\"\n      }),\n      type: \"text\",\n      required: true,\n      isMandatory: \"*\",\n      onChange: event => this.onLoginInputChange(event),\n      value: this.state.selectedRecord.scaptcha,\n      style: {\n        marginTop: \"15px\",\n        maxWidth: \"310px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(CustomButtom, {\n      name: \"loginbutton\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_LOGIN\"\n      }),\n      color: \"primary\",\n      className: \"btn-user btn-primary-blue\",\n      handleClick: () => this.onLoginSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }), this.props.Login.openCPModal && this.props.Login.userInfo.nlogintypecode === LOGINTYPE.INTERNAL && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openCPModal,\n      closeModal: this.closeModal,\n      loginoperation: true,\n      inputParam: {},\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.PassFlag === 6 ? this.onCreatePassWord : this.onChangePassword,\n      selectedRecord: this.state.createPwdRecord || {},\n      mandatoryFields: this.mandatoryFieldFunction(this.props.Login.PassFlag),\n      addComponent: this.props.Login.PassFlag === 6 ? /*#__PURE__*/React.createElement(CreatePassword, {\n        sloginid: this.state.selectedRecord.sloginid,\n        createPwdRecord: this.state.createPwdRecord,\n        msg: fnPassMessage(this.props.Login.passwordPolicy),\n        onInputChange: event => this.onInputChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }\n      }) : this.props.Login.PassFlag === transactionStatus.EXPIRED ? /*#__PURE__*/React.createElement(ChangePassword, {\n        sloginid: this.state.selectedRecord.sloginid,\n        createPwdRecord: this.state.createPwdRecord,\n        msg: fnPassMessage(this.props.Login.passwordPolicy),\n        onInputChange: event => this.onInputChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 33\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }), this.props.Login.openADSModal && this.props.Login.userInfo.nlogintypecode === LOGINTYPE.ADS && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openADSModal,\n      closeModal: this.closeADSModal,\n      loginoperation: true,\n      inputParam: {},\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onCreateADSPassWord,\n      selectedRecord: this.state.createPwdRecord || {},\n      mandatoryFields: this.mandatoryFieldFunction(\"ADS\"),\n      addComponent: /*#__PURE__*/React.createElement(CreateADSPassword, {\n        sloginid: this.state.selectedRecord.sloginid,\n        createPwdRecord: this.state.createPwdRecord,\n        onInputChange: event => this.onInputChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  onUsersiteChange(ComboVal, fieldName) {\n    const selectedRecord = this.state.selectedRecord || {};\n    selectedRecord[fieldName] = ComboVal;\n    const inputParam = {\n      selectedRecord\n    };\n    this.props.getUsersiteRole(inputParam);\n  }\n\n  componentDidMount() {\n    this.loginRef.current[0].focus();\n    this.props.getLoginDetails();\n  }\n\n  mandatoryFieldFunction(passFlag) {\n    let mandatoryField = [];\n\n    if (passFlag === 6) {\n      mandatoryField = [{\n        \"idsName\": \"IDS_NEWPASSWORD\",\n        \"dataField\": \"snewpassword\",\n        \"mandatory\": false\n      }, {\n        \"idsName\": \"IDS_CONFIRMPASSWORD\",\n        \"dataField\": \"sconfirmpassword\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else if (passFlag === \"ADS\") {\n      mandatoryField = [{\n        \"idsName\": \"IDS_ADSPASSWORD\",\n        \"dataField\": \"sadspassword\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else {\n      mandatoryField = [{\n        \"idsName\": \"IDS_OLDPASSWORD\",\n        \"dataField\": \"soldpassword\",\n        \"mandatory\": false\n      }, {\n        \"idsName\": \"IDS_NEWPASSWORD\",\n        \"dataField\": \"snewpassword\",\n        \"mandatory\": false\n      }, {\n        \"idsName\": \"IDS_CONFIRMPASSWORD\",\n        \"dataField\": \"sconfirmpassword\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    }\n\n    return mandatoryField;\n  }\n\n  onLoginInputChange(event) {\n    // Gowtham R -- 14/12/2024 -- for Vacuum ALPD-5190\n    if (this.state.selectedRecord.nlanguagecode === undefined && event.target.value !== \"\") this.props.getLoginDetails();\n    const selectedRecord = this.state.selectedRecord || {};\n    const loginid = validateLoginId(event.target.value);\n\n    if (loginid) {\n      selectedRecord[event.target.name] = event.target.value;\n    } else {\n      selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name] ? this.state.selectedRecord[event.target.name] : \"\";\n    }\n\n    this.setState({\n      selectedRecord\n    });\n  }\n\n  selectInputOnChange(event) {\n    const selectedRecord = this.state.selectedRecord || {};\n    selectedRecord[event.target.name] = event.target.value;\n    this.setState({\n      selectedRecord\n    });\n  }\n\n  onInputChange(event) {\n    const createPwdRecord = this.state.createPwdRecord || {};\n    createPwdRecord[event.target.name] = event.target.value;\n    this.setState({\n      createPwdRecord\n    });\n  }\n\n  onFocusOutEvent(event) {\n    // event.stopPropagation();\n    //  Added by Ragul.C for Double alert shows for Invaliduser\n    if (event.target.name === \"sloginid\") {\n      event.stopPropagation();\n    }\n\n    const sloginid = event.target.value;\n\n    if (sloginid !== \"\") {\n      const selectedRecord = this.state.selectedRecord || {};\n      const inputParam = {\n        sloginid,\n        Language: selectedRecord.nlanguagecode && selectedRecord.nlanguagecode.item,\n        logintype: this.props.Login.loginTypeList,\n        nlogintypecode: selectedRecord.nlogintypecode && selectedRecord.nlogintypecode.value || -1\n      };\n      this.props.getUserSiteAndRole(inputParam, selectedRecord);\n    }\n  }\n\n  onLoginSubmit() {\n    const selectedRecord = this.state.selectedRecord;\n    const mandatoryField = [{\n      \"idsName\": \"IDS_LOGINID\",\n      \"dataField\": \"sloginid\",\n      \"mandatory\": false\n    }, {\n      \"idsName\": \"IDS_PASSWORD\",\n      \"dataField\": \"spassword\",\n      \"mandatory\": true\n    }, //Don't Remove the Commented line commented for NIBSC\n    {\n      \"idsName\": \"IDS_SITE\",\n      \"dataField\": \"nusersitecode\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_ROLE\",\n      \"dataField\": \"nusermultirolecode\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_LOGINTYPE\",\n      \"dataField\": \"nlogintypecode\",\n      \"mandatory\": true\n    }, //Don't Remove the Commented line commented for NIBSC\n    {\n      \"idsName\": \"IDS_LANGUAGE\",\n      \"dataField\": \"nlanguagecode\",\n      \"mandatory\": true\n    }]; //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)         \n\n    if (parseInt(this.props.Login.captchaNeeded) === transactionStatus.YES) {\n      mandatoryField.push({\n        idsName: \"IDS_CAPTCHA\",\n        dataField: \"scaptcha\",\n        mandatory: true\n      });\n    }\n\n    const failedControls = [];\n    mandatoryField.map(item => {\n      if (selectedRecord[item.dataField] === undefined) {\n        failedControls.push(this.props.intl.formatMessage({\n          id: item.idsName\n        }));\n      } else if (typeof selectedRecord[item.dataField] === \"object\") {\n        //to validate FormSelectSearch component\n        if (selectedRecord[item.dataField].length === 0) {\n          failedControls.push(this.props.intl.formatMessage({\n            id: item.idsName\n          }));\n        }\n      } else if (typeof selectedRecord[item.dataField] === \"string\") {\n        //to handle string field -- added trim function\n        if (selectedRecord[item.dataField].trim().length === 0) {\n          failedControls.push(this.props.intl.formatMessage({\n            id: item.idsName\n          }));\n        }\n      }\n\n      return null;\n    });\n\n    if (failedControls.length === 0) {\n      let nlogintypecode = selectedRecord.nlogintypecode.value;\n\n      if (selectedRecord.nusercode === -1) {\n        nlogintypecode = LOGINTYPE.INTERNAL;\n      } //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)\n\n\n      if (parseInt(this.props.Login.captchaNeeded) === transactionStatus.YES) {\n        let userCaptcha = this.state.selectedRecord.scaptcha;\n\n        if (validateCaptcha(userCaptcha) !== true) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INVALIDCAPTCHA\"\n          })); //6 numberOfCharacters, backgroundColor = '#D3D3D3', fontColor = '#000000', charMap = 'upper/lower/numbers'\n\n          loadCaptchaEnginge(6, '#D3D3D3');\n        } else {\n          const inputParam = {\n            nusermultisitecode: selectedRecord.nusersitecode.value,\n            nusermultirolecode: selectedRecord.nusermultirolecode.value,\n            slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\n            slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\n            spassword: selectedRecord.spassword,\n            // nusercode: selectedRecord.nusercode,\n            nusercode: selectedRecord.nusercode ? selectedRecord.nusercode : this.props.Login.nusercode,\n            nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\n            sloginid: selectedRecord.sloginid,\n            nlogintypecode: nlogintypecode,\n            //nlogintypecode: 1,\n            url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\n            // url: \"/login/internallogin\" ,\n            navigation: \"home\",\n            languageList: this.props.Login.languageList,\n            nsitecode: selectedRecord.nusersitecode.item.nsitecode\n          };\n          this.props.clickOnLoginButton(inputParam, this.props.Login.languageList);\n        }\n      } else {\n        const inputParam = {\n          nusermultisitecode: selectedRecord.nusersitecode.value,\n          nusermultirolecode: selectedRecord.nusermultirolecode.value,\n          slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\n          slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\n          spassword: selectedRecord.spassword,\n          // nusercode: selectedRecord.nusercode,\n          nusercode: selectedRecord.nusercode ? selectedRecord.nusercode : this.props.Login.nusercode,\n          nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\n          sloginid: selectedRecord.sloginid,\n          nlogintypecode: nlogintypecode,\n          //nlogintypecode: 1,\n          url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\n          // url: \"/login/internallogin\" ,\n          navigation: \"home\",\n          languageList: this.props.Login.languageList,\n          nsitecode: selectedRecord.nusersitecode.item.nsitecode\n        };\n        this.props.clickOnLoginButton(inputParam, this.props.Login.languageList);\n      }\n    } else {\n      toast.info(`${this.props.intl.formatMessage({\n        id: \"IDS_ENTER\"\n      })} ${failedControls[0]}`);\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.navigation === \"home\" || this.props.Login.navigation === \"dashboard\" || this.props.Login.navigation === \"alert\") {\n      this.props.history.push('/' + this.props.Login.navigation);\n    } //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)\n\n\n    if (!this.state.captchaKey && parseInt(this.props.Login.captchaNeeded) === transactionStatus.YES) {\n      //6 numberOfCharacters, backgroundColor = '#D3D3D3', fontColor = '#000000', charMap = 'upper/lower/numbers'\n      loadCaptchaEnginge(6, '#D3D3D3');\n      this.setState({\n        captchaKey: true\n      });\n    }\n\n    let selectedRecord = this.state.selectedRecord || {};\n    let createPwdRecord = this.state.createPwdRecord || {};\n    let isStateChanged = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = { ...selectedRecord,\n        ...this.props.Login.selectedRecord\n      }; // Gowtham --ALPD-5190\n\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.createPwdRecord !== previousProps.Login.createPwdRecord) {\n      createPwdRecord = this.props.Login.createPwdRecord;\n      isStateChanged = true;\n    } //     Added by Ragul.C for Double alert shows for Invaliduser\n    //         if (this.props.Login !== previousProps.Login) {\n    //           //  selectedRecord[\"nusermultirolecode\"]=this.props.Login.selectedRecord && this.props.Login.selectedRecord.nusermultirolecode;\n    //             selectedRecord[\"nusermultirolecode\"]=this.props.Login.selectedRecord && this.props.Login.selectedRecord.nusermultirolecode !== undefined ?this.props.Login.selectedRecord.nusermultirolecode:this.props.Login.nusermultirolecode;\n    //             //this.props.Login.nusermultirolecode;\n    //             selectedRecord[\"nusersitecode\"]=this.state.selectedRecord.nusersitecode!==undefined?this.state.selectedRecord.nusersitecode:this.props.Login.nusersitecode;\n    // //            selectedRecord[\"nusersitecode\"]=this.props.Login.nusersitecode;\n    //             selectedRecord[\"nusercode\"]=this.props.Login.nusercode;\n    //             selectedRecord[\"nlogintypecode\"]=this.props.Login.nlogintypecode;\n    //             // selectedRecord[\"nlanguagecode\"]=this.props.Login.nlanguagecode;\n    //             isStateChanged = true;\n    //         }\n\n\n    if (isStateChanged) {\n      this.setState({\n        selectedRecord,\n        createPwdRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  clickOnLoginButton,\n  changeLanguage,\n  getLoginDetails,\n  getUserSiteAndRole,\n  updateStore,\n  createPassword,\n  changepassword,\n  getUsersiteRole,\n  checkPassword,\n  validateADSPassword\n})(injectIntl(SignIn));","map":{"version":3,"sources":["D:/WorkingFolder/LIMS/ALPD/branches/Version 11.0.0.1/QuaLISWeb/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","injectIntl","FormInput","CustomButtom","changeLanguage","getLoginDetails","getUserSiteAndRole","updateStore","createPassword","validateADSPassword","changepassword","getUsersiteRole","checkPassword","CreatePassword","CreateADSPassword","clickOnLoginButton","toast","FormSelectSearch","validateLoginId","SlideOutModal","DEFAULT_RETURN","ChangePassword","changePasswordValidation","fnPassMessage","fnValidatePassword","LOGINTYPE","transactionStatus","Form","loadCaptchaEnginge","LoadCanvasTemplate","validateCaptcha","mapStateToProps","state","Login","SignIn","Component","constructor","props","closeModal","updateInfo","typeName","data","openCPModal","closeADSModal","openADSModal","onCreatePassWord","selectedRecord","createPwdRecord","snewpassword","trim","sconfirmpassword","sloginid","warn","intl","formatMessage","id","nusermultirolecode","undefined","nusersitecode","nusercode","nlogintypecode","nlanguagecode","setState","returnString","passwordPolicy","inputParam","spassword","value","info","onCreateADSPassWord","sadspassword","slanguagefilename","item","sfilename","userInfo","ADS","onChangePassword","returnMsg","sOldPassword","soldpassword","isPasswordExpiry","suserrolename","label","slanguagetypecode","onSelectChange","ComboVal","fieldName","INTERNAL","Language","nusermultisitecode","nuserrolecode","onChangeLanguage","loginTypes","onLoginEvent","event","keyCode","inputValue","target","show","open","onLoginSubmit","AutoLogin","parseInt","url","navigation","nsitecode","languageList","PasswordPolicy","captchaKey","loginRef","createRef","render","loginTypeList","loginUserSite","count","loginUserRole","onLoginInputChange","onFocusOutEvent","selectInputOnChange","length","onUsersiteChange","captchaNeeded","YES","position","top","right","width","height","backgroundColor","transform","pointerEvents","maxWidth","scaptcha","marginTop","screenName","PassFlag","mandatoryFieldFunction","onInputChange","EXPIRED","componentDidMount","current","focus","passFlag","mandatoryField","loginid","name","stopPropagation","logintype","push","idsName","dataField","mandatory","failedControls","map","userCaptcha","componentDidUpdate","previousProps","history","isStateChanged"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButtom from '../custom-button/custom-button.component';\r\nimport { changeLanguage, getLoginDetails, getUserSiteAndRole, updateStore, createPassword,validateADSPassword, changepassword, getUsersiteRole, checkPassword } from '../../actions';\r\nimport CreatePassword from '../../pages/Login/CreatePassWord';\r\nimport CreateADSPassword from '../../pages/Login/CreateADSPassWord';\r\nimport { clickOnLoginButton } from '../../actions'\r\nimport { toast } from 'react-toastify';\r\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\r\nimport { validateLoginId } from '../CommonScript';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport ChangePassword from '../../pages/Login/ChangePassWord';\r\nimport { changePasswordValidation, fnPassMessage, fnValidatePassword } from '../../pages/Login/LoginCommonFunction';\r\nimport { LOGINTYPE, transactionStatus } from '../Enumeration'\r\nimport { Form } from 'react-bootstrap';\r\nimport { loadCaptchaEnginge, LoadCanvasTemplate, validateCaptcha } from 'react-simple-captcha';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass SignIn extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PasswordPolicy: {},\r\n            selectedRecord: {},\r\n            captchaKey:false, //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)\r\n           \r\n        }\r\n        this.loginRef = React.createRef();\r\n    }\r\n\r\n    render() {       \r\n\r\n        const { loginTypeList, languageList, loginUserSite, count=0,\r\n             loginUserRole } = this.props.Login;\r\n\r\n              \r\n             \r\n        return (\r\n            <Form ref={this.loginRef}>\r\n                <FormInput\r\n                    name=\"sloginid\"\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\r\n                    type=\"text\"\r\n                    // placeholder={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\r\n                    required={true}\r\n                    isMandatory={\"*\"}\r\n                    onChange={(event) => this.onLoginInputChange(event)}\r\n                    onBlur={(event) => this.onFocusOutEvent(event)}\r\n                    //ALPD-1926\r\n                    // onKeyUp={this.AutoLogin} \r\n                    value={this.state.selectedRecord.sloginid}\r\n                />\r\n                <FormInput\r\n                    name=\"spassword\"\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                    type=\"password\"\r\n                    required={true}\r\n                    isMandatory={\"*\"}\r\n                    // placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                    onChange={(event) => this.selectInputOnChange(event)}\r\n                    onKeyUp={this.onLoginEvent}\r\n                    value={this.state.selectedRecord.spassword}\r\n                />\r\n                {/* Don't Remove the Commented line commented for NIBSC */}\r\n                { (loginUserSite !== undefined && loginUserSite.length > 1) ?\r\n                <FormSelectSearch\r\n                    name={\"nusersitecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginUserSite || []}\r\n                    optionId='nusersitecode'\r\n                    optionValue='ssitename'\r\n                    value={this.state.selectedRecord.nusersitecode ? this.state.selectedRecord.nusersitecode : \"\"}\r\n                    onChange={value => this.onUsersiteChange(value, \"nusersitecode\")}\r\n                >\r\n                </FormSelectSearch>:\"\"}\r\n                <FormSelectSearch\r\n                    name={\"nusermultirolecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_USERROLE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginUserRole || []}\r\n                    optionId='nusermultirolecode'\r\n                    optionValue='suserrolename'\r\n                    value={this.state.selectedRecord.nusermultirolecode ? this.state.selectedRecord.nusermultirolecode : \"\"}\r\n                    onChange={value => this.onSelectChange(value, \"nusermultirolecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n               {/* ALPD-3816 */}\r\n               { (loginTypeList !== undefined && loginTypeList.length > 1) ?\r\n                 <FormSelectSearch\r\n                    name={\"nlogintypecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_LOGINTYPE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginTypeList || []}\r\n                    optionId='nlogintypecode'\r\n                    optionValue='sdisplayname'\r\n                    value={this.state.selectedRecord.nlogintypecode ? this.state.selectedRecord.nlogintypecode : \"\"}\r\n                    onChange={value => this.onSelectChange(value, \"nlogintypecode\")}\r\n                >\r\n                </FormSelectSearch> \r\n                : \"\"\r\n                } \r\n                {/* Don't Remove the Commented line commented for NIBSC */}\r\n                {/* ALPD-3816 */}\r\n                { (languageList !== undefined && languageList.length > 1) ?\r\n                <FormSelectSearch\r\n                    name={\"nlanguagecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_LANGUAGE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={languageList || []}\r\n                    optionId='nlanguagecode'\r\n                    optionValue='slanguagename'\r\n                    value={this.state.selectedRecord.nlanguagecode ? this.state.selectedRecord.nlanguagecode : \"\"}\r\n                    onChange={value => this.onChangeLanguage(value, \"nlanguagecode\")}\r\n                >\r\n                </FormSelectSearch> : \"\"\r\n                }\r\n                {/* Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation) */}\r\n                {parseInt(this.props.Login.captchaNeeded)===transactionStatus.YES ? \r\n                    <div className='canvas'>                            \r\n                        <LoadCanvasTemplate />\r\n                        <div\r\n                            style={{\r\n                                position: 'absolute',\r\n                                top: '15px',\r\n                                right: '25px',\r\n                                width: '100%',\r\n                                height: '2px',\r\n                                backgroundColor: 'black',\r\n                                transform: 'translateY(-50%)',\r\n                                pointerEvents: 'none',\r\n                                maxWidth:\"150px\"\r\n                            }}\r\n                            ></div>\r\n\r\n                        <FormInput\r\n                            name=\"scaptcha\"\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_CAPTCHA\" })}\r\n                            type=\"text\"\r\n                            required={true}\r\n                            isMandatory={\"*\"}\r\n                            onChange={(event) => this.onLoginInputChange(event)}                   \r\n                            value={this.state.selectedRecord.scaptcha}\r\n                            style={{marginTop:\"15px\", maxWidth:\"310px\"}}\r\n\r\n                        />\r\n                    </div>                        \r\n                :\"\"} \r\n                    \r\n               \r\n\r\n\r\n\r\n                <CustomButtom name=\"loginbutton\" label={this.props.intl.formatMessage({id:\"IDS_LOGIN\"})} color=\"primary\" className=\"btn-user btn-primary-blue\"\r\n                    handleClick={() => this.onLoginSubmit()}></CustomButtom>\r\n                { this.props.Login.openCPModal &&\r\n                    this.props.Login.userInfo.nlogintypecode === LOGINTYPE.INTERNAL &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openCPModal}\r\n                        closeModal={this.closeModal}\r\n                        loginoperation={true}\r\n                        inputParam={{}}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.Login.PassFlag === 6 ? this.onCreatePassWord : this.onChangePassword}\r\n                        selectedRecord={this.state.createPwdRecord || {}}\r\n                        mandatoryFields={this.mandatoryFieldFunction(this.props.Login.PassFlag)}\r\n                        addComponent={this.props.Login.PassFlag === 6 ?\r\n                            <CreatePassword\r\n                                sloginid={this.state.selectedRecord.sloginid}\r\n                                createPwdRecord={this.state.createPwdRecord}\r\n                                msg={fnPassMessage(this.props.Login.passwordPolicy)}\r\n                                onInputChange={(event) => this.onInputChange(event)}\r\n                            /> : this.props.Login.PassFlag === transactionStatus.EXPIRED ?\r\n                                <ChangePassword\r\n                                    sloginid={this.state.selectedRecord.sloginid}\r\n                                    createPwdRecord={this.state.createPwdRecord}\r\n                                    msg={fnPassMessage(this.props.Login.passwordPolicy)}\r\n                                    onInputChange={(event) => this.onInputChange(event)}\r\n                                /> : \"\"\r\n                        }\r\n                    />}\r\n                     {/* Start ALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it */}\r\n                    { this.props.Login.openADSModal &&\r\n                    this.props.Login.userInfo.nlogintypecode === LOGINTYPE.ADS &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openADSModal}\r\n                        closeModal={this.closeADSModal}\r\n                        loginoperation={true}\r\n                        inputParam={{}}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onCreateADSPassWord}\r\n                        selectedRecord={this.state.createPwdRecord || {}}\r\n                        mandatoryFields={this.mandatoryFieldFunction(\"ADS\")}\r\n                        addComponent={\r\n                            <CreateADSPassword\r\n                                sloginid={this.state.selectedRecord.sloginid}\r\n                                createPwdRecord={this.state.createPwdRecord}\r\n                                onInputChange={(event) => this.onInputChange(event)}\r\n                            /> \r\n                        }\r\n                    />}\r\n                    {/*End  ALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it */}\r\n            </Form>\r\n        );\r\n    }\r\n\r\n\r\n    onUsersiteChange(ComboVal, fieldName) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        const inputParam = {\r\n            selectedRecord\r\n        };\r\n        this.props.getUsersiteRole(inputParam);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loginRef.current[0].focus();\r\n        this.props.getLoginDetails();            \r\n    }\r\n\r\n    mandatoryFieldFunction(passFlag) {\r\n        let mandatoryField = [];\r\n        if (passFlag === 6) {\r\n            mandatoryField = [\r\n                { \"idsName\": \"IDS_NEWPASSWORD\", \"dataField\": \"snewpassword\", \"mandatory\": false },\r\n                { \"idsName\": \"IDS_CONFIRMPASSWORD\", \"dataField\": \"sconfirmpassword\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n            ]\r\n        } else if (passFlag === \"ADS\") {\r\n            mandatoryField = [\r\n            { \"idsName\": \"IDS_ADSPASSWORD\", \"dataField\": \"sadspassword\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n        }\r\n        else {\r\n            mandatoryField = [\r\n                { \"idsName\": \"IDS_OLDPASSWORD\", \"dataField\": \"soldpassword\", \"mandatory\": false},\r\n                { \"idsName\": \"IDS_NEWPASSWORD\", \"dataField\": \"snewpassword\", \"mandatory\": false },\r\n                { \"idsName\": \"IDS_CONFIRMPASSWORD\", \"dataField\": \"sconfirmpassword\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n            ]\r\n        }\r\n        return mandatoryField;\r\n    }\r\n\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openCPModal: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n//Start\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n    closeADSModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openADSModal: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n//End\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n\r\n    onCreatePassWord = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const snewpassword = createPwdRecord.snewpassword.trim();\r\n        const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\r\n        if (selectedRecord.sloginid === snewpassword) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\" }));\r\n        } else if (sconfirmpassword !== snewpassword) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PASSWORDNOTMATCHED\" }));\r\n        } else {\r\n\r\n// Added by Ragul.C for Double alert shows for Invaliduser\r\n            //selectedRecord[\"nusermultirolecode\"]=this.props.Login.nusermultirolecode;\r\n            selectedRecord[\"nusermultirolecode\"]=this.state.selectedRecord.nusermultirolecode!==undefined && this.state.selectedRecord.nusermultirolecode!==\"\" ?this.state.selectedRecord.nusermultirolecode:this.props.Login.nusermultirolecode;\r\n            selectedRecord[\"nusersitecode\"]=this.state.selectedRecord.nusersitecode!==undefined && this.state.selectedRecord.nusersitecode!==\"\" ?this.state.selectedRecord.nusersitecode:this.props.Login.nusersitecode;\r\n            // selectedRecord[\"nusersitecode\"]=this.props.Login.nusersitecode;\r\n            selectedRecord[\"nusercode\"]=this.props.Login.nusercode;\r\n            selectedRecord[\"nlogintypecode\"]=this.props.Login.nlogintypecode;\r\n            selectedRecord[\"nlanguagecode\"]=this.props.Login.nlanguagecode;\r\n            this.setState({ selectedRecord });\r\n// \r\n            const returnString = fnValidatePassword(this.props.Login.passwordPolicy, snewpassword)\r\n            if (returnString === 0) {\r\n                const inputParam = {\r\n                    spassword: snewpassword,\r\n                    nusersitecode: selectedRecord.nusersitecode.value,\r\n                    nusermultirolecode: selectedRecord.nusermultirolecode.value\r\n                };\r\n                this.props.createPassword(inputParam);\r\n            } else {\r\n                toast.info(returnString);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Start\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n    onCreateADSPassWord = () => {\r\n        const selectedRecord = {...this.state.selectedRecord};\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const sadspassword = createPwdRecord.sadspassword && createPwdRecord.sadspassword.trim();\r\n                const inputParam = {\r\n                    spassword: sadspassword,\r\n                    sloginid: selectedRecord.sloginid,\r\n                    slanguagefilename: this.props.Login.nlanguagecode && this.props.Login.nlanguagecode.item && this.props.Login.nlanguagecode.item.sfilename,\r\n                    selectedRecord: selectedRecord,\r\n                    nlogintypecode: (this.props.Login.userInfo && this.props.Login.userInfo.nlogintypecode) || LOGINTYPE.ADS,\r\n                };\r\n                this.props.validateADSPassword(inputParam);\r\n        \r\n    }\r\n    //End\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n\r\n\r\n    onChangePassword = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const returnMsg = changePasswordValidation(createPwdRecord, this.props.Login.passwordPolicy, this.state.selectedRecord.sloginid);\r\n        if (returnMsg === 0) {\r\n            const inputParam = {\r\n                spassword: createPwdRecord.snewpassword.trim(),\r\n                sOldPassword: createPwdRecord.soldpassword.trim(),\r\n                nusersitecode: selectedRecord.nusersitecode.value,\r\n                isPasswordExpiry: true,\r\n                userInfo: { ...this.props.Login.userInfo, slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                            sloginid:selectedRecord.sloginid, suserrolename:selectedRecord.nusermultirolecode.label },\r\n                slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode\r\n            };\r\n\r\n            this.props.changepassword(inputParam);\r\n        } else {\r\n            toast.info(returnMsg);\r\n        }\r\n    }\r\n\r\n    onLoginInputChange(event) {\r\n        // Gowtham R -- 14/12/2024 -- for Vacuum ALPD-5190\r\n        if(this.state.selectedRecord.nlanguagecode === undefined && event.target.value !== \"\")\r\n            this.props.getLoginDetails();\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const loginid = validateLoginId(event.target.value);\r\n        if (loginid) {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name] ? this.state.selectedRecord[event.target.name] : \"\";\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    selectInputOnChange(event) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChange(event) {\r\n        const createPwdRecord = this.state.createPwdRecord || {};\r\n        createPwdRecord[event.target.name] = event.target.value;\r\n        this.setState({ createPwdRecord });\r\n    }\r\n\r\n    onSelectChange = (ComboVal, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        if (fieldName === \"nlogintypecode\" && ComboVal.value === LOGINTYPE.INTERNAL\r\n            && selectedRecord.sloginid && selectedRecord.sloginid !== \"\" \r\n            && selectedRecord.nusermultirolecode && selectedRecord.nusermultirolecode !== \"\"\r\n            && selectedRecord.nusersitecode && selectedRecord.nusersitecode !== \"\") {\r\n            const inputParam = {\r\n                sloginid: this.state.selectedRecord.sloginid,\r\n                Language: selectedRecord.nlanguagecode.item,\r\n                nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                nlogintypecode: ComboVal.value\r\n            };\r\n            this.props.checkPassword(inputParam, selectedRecord);\r\n        } else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onChangeLanguage = (ComboVal, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        this.props.changeLanguage(ComboVal.item.slanguagetypecode, selectedRecord,this.props.Login.loginTypes);\r\n    }\r\n\r\n\r\n    onFocusOutEvent(event) {\r\n\r\n        // event.stopPropagation();\r\n      //  Added by Ragul.C for Double alert shows for Invaliduser\r\n        if(event.target.name === \"sloginid\"){ \r\n            \r\n            event.stopPropagation();\r\n        }\r\n        const sloginid = event.target.value;\r\n        if (sloginid !== \"\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            const inputParam = {\r\n                sloginid, Language: selectedRecord.nlanguagecode && selectedRecord.nlanguagecode.item,\r\n                 logintype: this.props.Login.loginTypeList,\r\n                 nlogintypecode: selectedRecord.nlogintypecode && selectedRecord.nlogintypecode.value || -1,\r\n            };            \r\n            this.props.getUserSiteAndRole(inputParam, selectedRecord);\r\n        }       \r\n    }\r\n\r\n    onLoginEvent = (event) => {\r\n        if (event.keyCode === 13) {\r\n            const inputValue = event.target.value;\r\n            this.setState({\r\n                show: this.props.Login.open\r\n            })\r\n            if (inputValue !== \"\") {\r\n                this.onLoginSubmit(inputValue);\r\n            }\r\n        }\r\n    }\r\n    AutoLogin = (event) => {\r\n        if (event.keyCode === 118) {\r\n            let nlogintypecode = 1;\r\n            const inputParam = {\r\n                nusermultisitecode: parseInt(-1),\r\n                nusermultirolecode: parseInt(-1),\r\n                slanguagetypecode: \"en-US\",\r\n                spassword: \"123\",\r\n                nusercode: -1,\r\n                nlogintypecode: 1,\r\n                nuserrolecode: -1,\r\n                url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adslogin\",\r\n                navigation: \"home\",\r\n                nsitecode:-1,\r\n                languageList: this.props.Login.languageList\r\n            }\r\n            this.setState({\r\n                nusermultisitecode: parseInt(-1),\r\n                nusermultirolecode: parseInt(-1),\r\n                slanguagetypecode: 1,\r\n                spassword: \"123\",\r\n                nusercode: -1,\r\n                nlogintypecode: 1,\r\n                nuserrolecode: -1\r\n            })\r\n            this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);\r\n        }\r\n    }\r\n    onLoginSubmit() {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const mandatoryField = [\r\n            { \"idsName\": \"IDS_LOGINID\", \"dataField\": \"sloginid\", \"mandatory\": false },\r\n            { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"spassword\", \"mandatory\": true },\r\n            //Don't Remove the Commented line commented for NIBSC\r\n            { \"idsName\": \"IDS_SITE\", \"dataField\": \"nusersitecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_ROLE\", \"dataField\": \"nusermultirolecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_LOGINTYPE\", \"dataField\": \"nlogintypecode\", \"mandatory\": true },\r\n            //Don't Remove the Commented line commented for NIBSC\r\n            { \"idsName\": \"IDS_LANGUAGE\", \"dataField\": \"nlanguagecode\", \"mandatory\": true }\r\n        ];  \r\n        //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)         \r\n        if (parseInt(this.props.Login.captchaNeeded) === transactionStatus.YES) {\r\n            mandatoryField.push({  idsName: \"IDS_CAPTCHA\",  dataField: \"scaptcha\",  mandatory: true });\r\n        }\r\n            \r\n\r\n        \r\n        const failedControls = [];\r\n        mandatoryField.map(item => {\r\n            if (selectedRecord[item.dataField] === undefined) {\r\n                failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n            } else if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                //to validate FormSelectSearch component\r\n                if (selectedRecord[item.dataField].length === 0) {\r\n                    failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n                }\r\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                //to handle string field -- added trim function\r\n                if (selectedRecord[item.dataField].trim().length === 0) {\r\n                    failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n        if (failedControls.length === 0) {\r\n            let nlogintypecode = selectedRecord.nlogintypecode.value;\r\n            if (selectedRecord.nusercode === -1) {\r\n                nlogintypecode = LOGINTYPE.INTERNAL;\r\n            }\r\n            //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)\r\n            if(parseInt(this.props.Login.captchaNeeded)=== transactionStatus.YES){\r\n                let userCaptcha = this.state.selectedRecord.scaptcha;\r\n                if(validateCaptcha(userCaptcha) !== true){\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_INVALIDCAPTCHA\" })); \r\n                    //6 numberOfCharacters, backgroundColor = '#D3D3D3', fontColor = '#000000', charMap = 'upper/lower/numbers'\r\n                    loadCaptchaEnginge(6,'#D3D3D3');\r\n                }else{\r\n                    const inputParam = {\r\n                        nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                        nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                        slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\r\n                        slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                        spassword: selectedRecord.spassword,\r\n                        // nusercode: selectedRecord.nusercode,\r\n                        nusercode: selectedRecord.nusercode ? selectedRecord.nusercode : this.props.Login.nusercode,\r\n                        nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                        sloginid: selectedRecord.sloginid,\r\n                        nlogintypecode: nlogintypecode,\r\n                        //nlogintypecode: 1,\r\n                        url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\r\n                        // url: \"/login/internallogin\" ,\r\n                        navigation: \"home\",\r\n                        languageList: this.props.Login.languageList,\r\n                        nsitecode:selectedRecord.nusersitecode.item.nsitecode\r\n                    }\r\n                    this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);    \r\n                }\r\n            }else{\r\n                const inputParam = {\r\n                        nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                        nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                        slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\r\n                        slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                        spassword: selectedRecord.spassword,\r\n                        // nusercode: selectedRecord.nusercode,\r\n                        nusercode: selectedRecord.nusercode ? selectedRecord.nusercode : this.props.Login.nusercode,\r\n                        nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                        sloginid: selectedRecord.sloginid,\r\n                        nlogintypecode: nlogintypecode,\r\n                        //nlogintypecode: 1,\r\n                        url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\r\n                        // url: \"/login/internallogin\" ,\r\n                        navigation: \"home\",\r\n                        languageList: this.props.Login.languageList,\r\n                        nsitecode:selectedRecord.nusersitecode.item.nsitecode\r\n                }\r\n                this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);   \r\n            }\r\n           \r\n\r\n\r\n            \r\n        } else {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.navigation === \"home\"||this.props.Login.navigation === \"dashboard\"\r\n        ||this.props.Login.navigation === \"alert\") {\r\n            this.props.history.push('/'+this.props.Login.navigation);\r\n        }\r\n        \r\n        //Added for sonia on 16th June 2025 for jira id:ALPD-6028 (Captcha Validation)\r\n        if(!this.state.captchaKey && parseInt(this.props.Login.captchaNeeded) === transactionStatus.YES) {\r\n            //6 numberOfCharacters, backgroundColor = '#D3D3D3', fontColor = '#000000', charMap = 'upper/lower/numbers'\r\n            loadCaptchaEnginge(6,'#D3D3D3');\r\n            this.setState({captchaKey:true})\r\n       }\r\n        \r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let createPwdRecord = this.state.createPwdRecord || {};\r\n        let isStateChanged = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n           selectedRecord = { ...selectedRecord, ...this.props.Login.selectedRecord }; // Gowtham --ALPD-5190\r\n            isStateChanged = true;\r\n        }\r\n\r\n        if (this.props.Login.createPwdRecord !== previousProps.Login.createPwdRecord) {\r\n            createPwdRecord = this.props.Login.createPwdRecord;\r\n            isStateChanged = true;\r\n        }\r\n\r\n   //     Added by Ragul.C for Double alert shows for Invaliduser\r\n   \r\n//         if (this.props.Login !== previousProps.Login) {\r\n//           //  selectedRecord[\"nusermultirolecode\"]=this.props.Login.selectedRecord && this.props.Login.selectedRecord.nusermultirolecode;\r\n//             selectedRecord[\"nusermultirolecode\"]=this.props.Login.selectedRecord && this.props.Login.selectedRecord.nusermultirolecode !== undefined ?this.props.Login.selectedRecord.nusermultirolecode:this.props.Login.nusermultirolecode;\r\n//             //this.props.Login.nusermultirolecode;\r\n//             selectedRecord[\"nusersitecode\"]=this.state.selectedRecord.nusersitecode!==undefined?this.state.selectedRecord.nusersitecode:this.props.Login.nusersitecode;\r\n// //            selectedRecord[\"nusersitecode\"]=this.props.Login.nusersitecode;\r\n//             selectedRecord[\"nusercode\"]=this.props.Login.nusercode;\r\n//             selectedRecord[\"nlogintypecode\"]=this.props.Login.nlogintypecode;\r\n//             // selectedRecord[\"nlanguagecode\"]=this.props.Login.nlanguagecode;\r\n//             isStateChanged = true;\r\n//         }\r\n\r\n\r\n        if (isStateChanged) {\r\n            this.setState({ selectedRecord, createPwdRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    clickOnLoginButton, changeLanguage,\r\n    getLoginDetails, getUserSiteAndRole, updateStore, createPassword, changepassword, getUsersiteRole, checkPassword, validateADSPassword\r\n})(injectIntl(SignIn));\r\n"]},"metadata":{},"sourceType":"module"}